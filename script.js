// Script to handle theme toggling, navigation highlighting and tool functionality

window.addEventListener('DOMContentLoaded', () => {
  // Theme toggle setup
  const themeToggle = document.getElementById('theme-toggle');
  if (themeToggle) {
    const applyTheme = (theme) => {
      document.documentElement.setAttribute('data-theme', theme);
      themeToggle.textContent = theme === 'dark' ? '‚òÄ' : 'üåô';
    };
    const savedTheme = localStorage.getItem('theme') || 'light';
    applyTheme(savedTheme);
    themeToggle.addEventListener('click', () => {
      const current = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light';
      const next = current === 'dark' ? 'light' : 'dark';
      applyTheme(next);
      localStorage.setItem('theme', next);
    });
  }

  // Highlight current nav link
  const navLinks = document.querySelectorAll('nav a');
  navLinks.forEach(link => {
    const href = link.getAttribute('href');
    // Determine current page name (default to index.html for root).
    // Strip query parameters to ensure matching links like about.html?v=1
    const fullPath = window.location.pathname.split('/').pop() || 'index.html';
    const page = fullPath.split('?')[0];
    if (href === page) {
      link.classList.add('active');
    }
  });

  // Image compression functionality
  const imgInput = document.getElementById('img-in');
  if (imgInput) {
    const imgQuality = document.getElementById('img-q');
    const imgGo = document.getElementById('img-go');
    const imgCanvas = document.getElementById('img-cv');
    const imgDownload = document.getElementById('img-dl');
    imgGo.addEventListener('click', () => {
      const file = imgInput.files[0];
      if (!file) { alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'); return; }
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => {
          imgCanvas.width = img.width;
          imgCanvas.height = img.height;
          const ctx = imgCanvas.getContext('2d');
          ctx.drawImage(img, 0, 0);
          imgCanvas.classList.remove('hidden');
          imgCanvas.toBlob(blob => {
            const url = URL.createObjectURL(blob);
            imgDownload.href = url;
            imgDownload.classList.remove('hidden');
          }, 'image/webp', parseFloat(imgQuality.value));
        };
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
    });
  }

  // PDF merge functionality
  const pdfInput = document.getElementById('pdf-in');
  if (pdfInput) {
    const pdfGo = document.getElementById('pdf-go');
    const pdfDownload = document.getElementById('pdf-dl');
    pdfGo.addEventListener('click', async () => {
      const files = pdfInput.files;
      if (!files.length) { alert('–í—ã–±–µ—Ä–∏—Ç–µ PDF'); return; }
      const mergedPdf = await PDFLib.PDFDocument.create();
      for (let file of files) {
        const arrayBuffer = await file.arrayBuffer();
        const pdf = await PDFLib.PDFDocument.load(arrayBuffer);
        const pages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
        pages.forEach(p => mergedPdf.addPage(p));
      }
      const buf = await mergedPdf.save();
      const blob = new Blob([buf], { type: 'application/pdf' });
      pdfDownload.href = URL.createObjectURL(blob);
      pdfDownload.classList.remove('hidden');
    });
  }

  // QR generator functionality
  const qrText = document.getElementById('qr-text');
  if (qrText) {
    const qrGo = document.getElementById('qr-go');
    const qrCanvas = document.getElementById('qr-canvas');
    qrGo.addEventListener('click', () => {
      const text = qrText.value.trim();
      if (!text) { alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'); return; }
      QRCode.toCanvas(qrCanvas, text, { width: 256, margin: 1 }, (err) => {
        if (err) alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR');
      });
    });
  }

  // Password generator functionality
  const passBtn = document.getElementById('pass-go');
  if (passBtn) {
    const passLen = document.getElementById('pass-length');
    const passUpper = document.getElementById('pass-upper');
    const passNumber = document.getElementById('pass-number');
    const passSymbol = document.getElementById('pass-symbol');
    const passOut = document.getElementById('pass-out');
    passBtn.addEventListener('click', () => {
      const length = parseInt(passLen.value) || 8;
      let chars = 'abcdefghijklmnopqrstuvwxyz';
      if (passUpper && passUpper.checked) chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      if (passNumber && passNumber.checked) chars += '0123456789';
      if (passSymbol && passSymbol.checked) chars += '!@#$%^&*()_+-=[]{},.<>?/';
      let result = '';
      for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      passOut.value = result;
    });

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const passCopy = document.getElementById('pass-copy');
    if (passCopy) {
      passCopy.addEventListener('click', () => {
        if (!passOut.value) { return; }
        navigator.clipboard.writeText(passOut.value).then(() => {
          const original = passCopy.textContent;
          passCopy.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
          setTimeout(() => { passCopy.textContent = original; }, 2000);
        });
      });
    }
  }

  // Color converter functionality
  const colorPicker = document.getElementById('color-picker');
  if (colorPicker) {
    const colorHex = document.getElementById('color-hex');
    const colorRgb = document.getElementById('color-rgb');
    const updateColor = () => {
      const hex = colorPicker.value;
      colorHex.textContent = hex;
      const bigint = parseInt(hex.substring(1), 16);
      const r = (bigint >> 16) & 255;
      const g = (bigint >> 8) & 255;
      const b = bigint & 255;
      colorRgb.textContent = `rgb(${r}, ${g}, ${b})`;
    };
    updateColor();
    colorPicker.addEventListener('input', updateColor);
  }

  // Random quote functionality
  const quoteBtn = document.getElementById('quote-go');
  if (quoteBtn) {
    const quoteOut = document.getElementById('quote-out');
    // –°–ø–∏—Å–æ–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö —Ü–∏—Ç–∞—Ç. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    const quotes = [
      '–ù–µ –±–æ–π—Ç–µ—Å—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞ ‚Äî –≤–∞–º –µ–≥–æ –Ω–µ –¥–æ—Å—Ç–∏—á—å. (–°–∞–ª—å–≤–∞–¥–æ—Ä –î–∞–ª–∏)',
      '–°–∞–º–æ–µ —Ç—Ä—É–¥–Ω–æ–µ ‚Äî —Ä–µ—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ —É–ø–æ—Ä—Å—Ç–≤–æ. (–ê–º–µ–ª–∏—è –≠—Ä—Ö–∞—Ä—Ç)',
      '–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—é, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. (–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å)',
      '–ú—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Ç–µ–º, –æ —á—ë–º –¥—É–º–∞–µ–º. (–ù–∞–ø–æ–ª–µ–æ–Ω –•–∏–ª–ª)',
      '–°–µ–∫—Ä–µ—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. (–ú–∞—Ä–∫–∞ –¢–≤–µ–Ω)',
      '–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–∞–º–æ–º—É. (–ü–∏—Ç–µ—Ä –î—Ä—É–∫–µ—Ä)' ,
      '–î–æ—Ä–æ–≥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ–¥ —à–∞–≥–∞–º–∏ –∏–¥—É—â–µ–≥–æ. (–§—Ä–∞–Ω—Ü –ö–∞—Ñ–∫–∞)'
    ];
    quoteBtn.addEventListener('click', () => {
      const idx = Math.floor(Math.random() * quotes.length);
      quoteOut.textContent = quotes[idx];
    });
  }

  // Hash calculator functionality
  const hashText = document.getElementById('hash-text');
  if (hashText) {
    const hashGo = document.getElementById('hash-go');
    const hashOut = document.getElementById('hash-out');
    hashGo.addEventListener('click', async () => {
      const text = hashText.value;
      const enc = new TextEncoder();
      const data = enc.encode(text);
      const digest = await crypto.subtle.digest('SHA-256', data);
      hashOut.textContent = Array.from(new Uint8Array(digest)).map(b => b.toString(16).padStart(2, '0')).join('');
    });
  }

  // Donation functionality via MetaMask
  const walletConnectBtn = document.getElementById('wallet-connect');
  if (walletConnectBtn) {
    let currentAccount;
    const walletArea = document.getElementById('wallet-area');
    const fromAddrSpan = document.getElementById('from-addr');
    const recipientInput = document.getElementById('recipient');
    const donateAmount = document.getElementById('donate-amount');
    const sendDonateBtn = document.getElementById('send-donate');
    const txStatus = document.getElementById('tx-status');
    walletConnectBtn.addEventListener('click', async () => {
      if (!window.ethereum) { alert('MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
      try {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        currentAccount = accounts[0];
        walletArea.classList.remove('hidden');
        fromAddrSpan.textContent = currentAccount;
        if (recipientInput) {
          recipientInput.value = currentAccount;
        }
      } catch (err) {
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + err.message);
      }
    });
    sendDonateBtn.addEventListener('click', async () => {
      if (!currentAccount) { alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫'); return; }
      const recipient = recipientInput.value || currentAccount;
      const amount = donateAmount.value;
      if (!amount) { alert('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É'); return; }
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      try {
        txStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        const tx = await signer.sendTransaction({
          to: recipient,
          value: ethers.utils.parseEther(amount)
        });
        txStatus.textContent = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ' + tx.hash;
      } catch (err) {
        txStatus.textContent = '–û—à–∏–±–∫–∞: ' + err.message;
      }
    });
  }

  // Base64 converter functionality
  const b64Input = document.getElementById('b64-input');
  if (b64Input) {
    const b64Encode = document.getElementById('b64-encode');
    const b64Decode = document.getElementById('b64-decode');
    const b64Out = document.getElementById('b64-out');
    b64Encode.addEventListener('click', () => {
      try {
        b64Out.value = btoa(b64Input.value);
      } catch (err) {
        alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: ' + err.message);
      }
    });
    b64Decode.addEventListener('click', () => {
      try {
        b64Out.value = atob(b64Input.value);
      } catch (err) {
        alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: ' + err.message);
      }
    });
  }

  // Unit converter functionality
  const convType = document.getElementById('conv-type');
  if (convType) {
    const convValue = document.getElementById('conv-value');
    const convFrom = document.getElementById('conv-from');
    const convTo = document.getElementById('conv-to');
    const convOut = document.getElementById('conv-out');
    const convGo = document.getElementById('conv-go');
    const lengthUnits = ['m','km','mi'];
    const weightUnits = ['kg','lb','g'];
    const tempUnits = ['C','F','K'];
    const updateOptions = () => {
      let units;
      if (convType.value === 'length') units = lengthUnits;
      else if (convType.value === 'weight') units = weightUnits;
      else units = tempUnits;
      convFrom.innerHTML = '';
      convTo.innerHTML = '';
      units.forEach(u => {
        const o1 = document.createElement('option');
        o1.value = u;
        o1.textContent = u;
        convFrom.appendChild(o1);
        const o2 = document.createElement('option');
        o2.value = u;
        o2.textContent = u;
        convTo.appendChild(o2);
      });
    };
    updateOptions();
    convType.addEventListener('change', updateOptions);
    const convertVal = (val, from, to) => {
      let v = val;
      if (convType.value === 'length') {
        // to metres
        if (from === 'km') v *= 1000;
        else if (from === 'mi') v *= 1609.34;
        // convert to target
        if (to === 'km') v /= 1000;
        else if (to === 'mi') v /= 1609.34;
      } else if (convType.value === 'weight') {
        // to kg
        if (from === 'g') v /= 1000;
        else if (from === 'lb') v *= 0.453592;
        // convert to target
        if (to === 'g') v *= 1000;
        else if (to === 'lb') v /= 0.453592;
      } else {
        // temp: convert to Celsius
        if (from === 'F') v = (v - 32) * 5/9;
        else if (from === 'K') v = v - 273.15;
        // convert from Celsius to target
        if (to === 'F') v = v * 9/5 + 32;
        else if (to === 'K') v = v + 273.15;
      }
      return v;
    };
    convGo.addEventListener('click', () => {
      const val = parseFloat(convValue.value);
      if (isNaN(val)) { alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'); return; }
      const from = convFrom.value;
      const to = convTo.value;
      const res = convertVal(val, from, to);
      convOut.textContent = res.toFixed(4);
    });
  }

  // Color palette generator
  const paletteGo = document.getElementById('palette-go');
  if (paletteGo) {
    const paletteContainer = document.getElementById('palette-container');
    paletteGo.addEventListener('click', () => {
      paletteContainer.innerHTML = '';
      for (let i = 0; i < 5; i++) {
        const color = '#' + Math.floor(Math.random() * 0xffffff).toString(16).padStart(6,'0');
        const swatch = document.createElement('div');
        swatch.className = 'palette-swatch';
        swatch.style.backgroundColor = color;
        swatch.textContent = color;
        swatch.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        swatch.addEventListener('click', () => {
          navigator.clipboard.writeText(color);
          const orig = swatch.textContent;
          swatch.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
          setTimeout(() => { swatch.textContent = orig; }, 1500);
        });
        paletteContainer.appendChild(swatch);
      }
    });
  }

  // Date difference calculator
  const dateFrom = document.getElementById('date-from');
  if (dateFrom) {
    const dateTo = document.getElementById('date-to');
    const dateGo = document.getElementById('date-go');
    const dateOut = document.getElementById('date-out');
    dateGo.addEventListener('click', () => {
      if (!dateFrom.value || !dateTo.value) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã');
        return;
      }
      const fromDate = new Date(dateFrom.value);
      const toDate = new Date(dateTo.value);
      const diffMs = Math.abs(toDate - fromDate);
      const diffDays = Math.round(diffMs / (1000 * 60 * 60 * 24));
      dateOut.textContent = `–†–∞–∑–Ω–∏—Ü–∞: ${diffDays} –¥–Ω–µ–π`;
    });
  }

  // Lorem Ipsum generator functionality
  const loremBtn = document.getElementById('lorem-go');
  if (loremBtn) {
    const loremCount = document.getElementById('lorem-count');
    const loremOut = document.getElementById('lorem-out');
    // –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç-—Ä—ã–±–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Lorem Ipsum. –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é.
    const loremSample =
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla facilisi. Vivamus eget mauris eu justo tincidunt tempor. Cras dictum, nibh sed semper feugiat, quam mi egestas mauris, nec convallis tortor felis quis arcu.';
    loremBtn.addEventListener('click', () => {
      const count = parseInt(loremCount.value) || 1;
      let paragraphs = [];
      for (let i = 0; i < count; i++) {
        paragraphs.push(loremSample);
      }
      loremOut.value = paragraphs.join('\n\n');
    });
  }

  // JSON formatter functionality
  const jsonIn = document.getElementById('json-in');
  if (jsonIn) {
    const jsonGo = document.getElementById('json-go');
    const jsonOut = document.getElementById('json-out');
    jsonGo.addEventListener('click', () => {
      try {
        const parsed = JSON.parse(jsonIn.value);
        jsonOut.value = JSON.stringify(parsed, null, 2);
      } catch (err) {
        alert('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: ' + err.message);
      }
    });
  }

      // BMI calculator functionality
      const bmiWeight = document.getElementById('bmi-weight');
      if (bmiWeight) {
        const bmiHeight = document.getElementById('bmi-height');
        const bmiGo = document.getElementById('bmi-go');
        const bmiOut = document.getElementById('bmi-out');
        bmiGo.addEventListener('click', () => {
          const weight = parseFloat(bmiWeight.value);
          const height = parseFloat(bmiHeight.value);
          if (!weight || !height) {
            alert('–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –∏ —Ä–æ—Å—Ç');
            return;
          }
          const hM = height / 100;
          const bmi = weight / (hM * hM);
          let category = '';
          if (bmi < 18.5) category = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å';
          else if (bmi < 25) category = '–ù–æ—Ä–º–∞';
          else if (bmi < 30) category = '–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å';
          else category = '–û–∂–∏—Ä–µ–Ω–∏–µ';
          bmiOut.textContent = `BMI: ${bmi.toFixed(2)} (${category})`;
        });
      }
});